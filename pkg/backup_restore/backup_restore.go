package backup_restore

import (
	"encoding/base64"
	"os"
	"os/exec"

	"hackattic_solutions/pkg/common"
)

// pg_restore -h localhost -p 5432 -U pice_backend -d pice_backend pg_dump
func BackupRestore() {
	dbBytes := "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"

	bytesToStore, err := base64.StdEncoding.DecodeString(dbBytes)
	common.HandleError(err)

	file, err := os.Create("pg_dump")
	common.HandleError(err)
	if _, err = file.Write(bytesToStore); err != nil {
		print(err.Error())
	}

	if err = file.Sync(); err != nil {
		print(err.Error())
	}

	// TODO: check why pg_dump is not working.
	_ = exec.Command("sh", "-c", "zcat < pg_dump > decompressed.sql")

}
